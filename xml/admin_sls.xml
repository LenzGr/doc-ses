<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- This appendix will probably not used anymore -->
<appendix xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="app-storage-sls">
 <title>Salt State (SLS) File Example</title>
 <para>
  This example shows a cluster configuration split into several SLS files. You
  can customize them to build up a cluster with &salt;. Note that you need to
  do local customization to the SLS files, such as supplying suitable disk
  device names, host names and IP addresses valid for your network environment.
  Lines beginning with '#' are comments.
 </para>
 <para>
  The structure is following:
 </para>
<screen>
├── ses
│   ├── ceph
│   │   ├── ceph.conf
│   │   └── init.sls
│   ├── common
│   │   ├── admin_key.sls
│   │   ├── mds_key.sls
│   │   ├── mon_key.sls
│   │   ├── osd_key.sls
│   │   └── rgw_key.sls
│   ├── mds
│   │   └── init.sls
│   ├── mon
│   │   └── init.sls
│   ├── osd
│   │   └── init.sls
│   └── rgw
│       └── init.sls
└── top.sls
 </screen>
 <example>
  <title><filename>top.sls</filename></title>
  <para>
   The configuration toplevel file <filename>top.sls</filename> includes other
   SLS files from the subdirectories of the <filename>ses</filename> directory,
   depending on which component is used.
  </para>
<screen>base:
  '*':
    - ses.ceph
  '*mon*':
    - ses.mon
  '*osd*':
    - ses.osd
  '*mds*':
    - ses.mds  
  '*rgw*':
    - ses.rgw</screen>
 </example>
 <example>
  <title><filename>ses/ceph/init.sls</filename></title>
<screen># We need to install ceph and its configuration library
packages:
  pkg.installed:
    - names:
      - ceph
      - python-ceph-cfg

# We need a ceph configuration file before we start.
# Note:
# - The file name is dependent on the cluster name:
#    /etc/ceph/${CLUSTER_NAME}.conf
/etc/ceph/ceph.conf:
  file:
    - managed
    - source:
# Where to get the source file will have to be customized to your environment.
    - salt://ses/ceph/ceph.conf
    - user: root
    - group: root
    - mode: 644
    - makedirs: True
    - require:
      - pkg: packages</screen>
 </example>
 <example>
  <title><filename>ses/ceph/ceph.conf</filename></title>
<screen>[global]
fsid = eaac9695-4265-4ca8-ac2a-f3a479c559b1
mon_initial_members = osd-mon-node0, mon-osd-mds-node1, mon-osd-node2
mon_host = 192.168.100.168,192.168.100.223,192.168.100.130
auth_cluster_required = cephx
auth_service_required = cephx
auth_client_required = cephx
filestore_xattr_use_omap = true</screen>
 </example>
 <para>
  Create the admin key and the keys for specific service types with
 </para>
<screen>salt '*' ceph.keyring_create type=&lt;keyring_type></screen>
 <para>
  before saving them. Customize the 'secret' value for your site using the
  values from the previous create command. All keys must be saved before the
  monitors are created as this has a side effect of creating keys not managed
  by &salt;.
 </para>
 <example>
  <title><filename>ses/common/admin_key.sls</filename></title>
<screen>keyring_admin_save:
  module.run:
   - name: ceph.keyring_save
   - kwargs: {
     'keyring_type' : 'admin',
     'secret' : 'AQBR8KhWgKw6FhAAoXvTT6MdBE+bV+zPKzIo6w=='
     }
   - require:
   - sls: ses.ceph</screen>
 </example>
 <example>
  <title><filename>ses/common/mds_key.sls</filename></title>
<screen>keyring_mds_save:
  module.run:
    - name: ceph.keyring_save
    - kwargs: {
        'keyring_type' : 'mds',
        'secret' : 'AQBR8KhWgKw6FhAAoXvTT6MdBE+bV+zPKzIo6w=='
        }
    - require:
    - sls: ses.ceph</screen>
 </example>
 <example>
  <title><filename>ses/common/mon_key.sls</filename></title>
<screen>keyring_mon_save:
  module.run:
    - name: ceph.keyring_save
    - kwargs: {
        'keyring_type' : 'mon',
        'secret' : 'AQBR8KhWgKw6FhAAoXvTT6MdBE+bV+zPKzIo6w=='
        }
    - require:
    - sls: ses.ceph</screen>
 </example>
 <example>
  <title><filename>ses/common/osd_key.sls</filename></title>
<screen>keyring_osd_save:
  module.run:
    - name: ceph.keyring_save
    - kwargs: {
        'keyring_type' : 'osd',
        'secret' : 'AQBR8KhWgKw6FhAAoXvTT6MdBE+bV+zPKzIo6w=='
        }
    - require:
    - sls: ses.ceph</screen>
 </example>
 <example>
  <title><filename>ses/common/rgw_key.sls</filename></title>
<screen>keyring_rgw_save:
  module.run:
    - name: ceph.keyring_save
    - kwargs: {
        'keyring_type' : 'rgw',
        'secret' : 'AQBR8KhWgKw6FhAAoXvTT6MdBE+bV+zPKzIo6w=='
        }
    - require:
    - sls: ses.ceph</screen>
 </example>
 <example>
  <title><filename>ses/mds/init.sls</filename></title>
<screen>include:
  - ses.ceph
  - ses.common.mds_key

keyring_mds_auth_add:
  module.run:
    - name: ceph.keyring_mds_auth_add
    - require:
      - module: keyring_mds_save
      - ceph: cluster_status

mds_create:
  module.run:
    - name: ceph.mds_create
    - kwargs: {
        name: mds.{{ grains['machine_id'] }},
        port: 1000,
        addr:{{ grains['fqdn_ip4'] }}
        }
    - require:
    - module: keyring_mds_auth_add</screen>
 </example>
 <example>
  <title><filename>ses/mon/init.sls</filename></title>
<screen>include:
  - ses.ceph
  - ses.common.admin_key
  - ses.common.mon_key

mon_create:
  module.run:
    - name: ceph.mon_create
    - require:
      - module: keyring_admin_save
      - module: keyring_mon_save

cluster_status:
  ceph.quorum:
    - require:
    - module: mon_create</screen>
 </example>
 <example>
  <title><filename>ses/osd/init.sls</filename></title>
<screen>include:
  - ses.ceph
  - ses.common.osd_key

keyring_osd_auth_add:
  module.run:
    - name: ceph.keyring_osd_auth_add
    - require:
      - module: keyring_osd_save
      - ceph: cluster_status

# Prepare disks for OSD use

prepare_vdb:
  module.run:
    - name: ceph.osd_prepare
    - kwargs: {
        osd_dev: /dev/vdb
      }
    - require:
      - module: keyring_osd_auth_add

# Activate OSD's on prepared disks

activate_vdb:
  module.run:
    - name: ceph.osd_activate
				- kwargs: {
        osd_dev: /dev/vdb
								}</screen>
 </example>
 <example>
  <title><filename>ses/rgw/init.sls</filename></title>
<screen>include:
  - ses.ceph
  - ses.common.rgw_key</screen>
 </example>
</appendix>
