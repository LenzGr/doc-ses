<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="storage-bp-account">
 <title>Accountancy</title>
 <para/>
 <sect1 xml:id="storage-bp-account-s3add">
  <title>Adding S3 Users</title>

  <para>
   S3 (Simple Storage Service) is an online file storage Web service, offered
   by Amazon. You can use the S3 interface to interact with the &ceph; &rgw;,
   besides the &swift; interface. You need to create a user to interact with
   the gateway.
  </para>

  <para>
   To create a user for the S3 interface, follow these steps:
  </para>

<screen>sudo radosgw-admin user create --uid=<replaceable>username</replaceable> \
 --display-name="<replaceable>display-name</replaceable>" --email=<replaceable>email</replaceable></screen>

  <para>
   For example:
  </para>

<screen>sudo radosgw-admin user create \
   --uid=example_user \
   --display-name="Example User" \
   --email=penguin@example.com</screen>

  <para>
   The command also creates the user's access and secret key. Check its output
   for <literal>access_key</literal> and <literal>secret_key</literal> keywords
   and their values:
  </para>

<screen>[...]
 "keys": [
       { "user": "example_user",
         "access_key": "11BS02LGFB6AL6H1ADMW",
         "secret_key": "vzCEkuryfn060dfee4fgQPqFrncKEIkh3ZcdOANY"}],
 [...]</screen>
 </sect1>
 <sect1 xml:id="storage-bp-account-s3rm">
  <title>Removing S3 Users</title>

  <para>
   To remove a user previously created to interact with the S3 interface, use
   the following command:
  </para>

<screen>sudo radosgw-admin user rm --uid=example_user</screen>

  <para>
   For more information on the command's options, see
   <xref linkend="storage-bp-account-swiftrm"/>.
  </para>
 </sect1>
 <sect1 xml:id="storage-bp-account-s3quota">
  <title>User Quota Management</title>

  <para>
   The &ceph; &rgw; enables you to set quotas on users and buckets owned by
   users. Quotas include the maximum number of objects in a bucket and the
   maximum storage size in megabytes.
  </para>

  <para>
   Before you enable a user quota, you first need to set its parameters:
  </para>

<screen>radosgw-admin quota set --quota-scope=user --uid=<replaceable>example_user</replaceable> \
 --max-objects=1024 --max-size=1024</screen>

  <variablelist>
   <varlistentry>
    <term><option>--max-objects</option>
    </term>
    <listitem>
     <para>
      Specifies the maximum number of objects. A negative value disables the
      check.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--max-size</option>
    </term>
    <listitem>
     <para>
      Specifies the maximum number of bytes. A negative value disables the
      check.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--quota-scope</option>
    </term>
    <listitem>
     <para>
      Sets the scope for the quota. The options are <literal>bucket</literal>
      and <literal>user</literal>. Bucket quotas apply to buckets a user owns.
      User quotas apply to a user.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Once you set a user quota, you may enable it:
  </para>

<screen>radosgw-admin quota enable --quota-scope=user --uid=<replaceable>example_user</replaceable></screen>

  <para>
   To disable a quota:
  </para>

<screen>radosgw-admin quota disable --quota-scope=user --uid=<replaceable>example_user</replaceable></screen>

  <para>
   To list quota settings:
  </para>

<screen>radosgw-admin user info --uid=<replaceable>example_user</replaceable></screen>

  <para>
   To update quota statistics:
  </para>

<screen>radosgw-admin user stats --uid=<replaceable>example_user</replaceable> --sync-stats</screen>
 </sect1>
 <sect1 xml:id="storage-bp-account-swiftadd">
  <title>Adding &swift; Users</title>

  <para>
   &swift; is a standard for stored data access compatible with &ostack;. It is
   used to interact with the &ceph; &rgw;. You need to create a &swift; user,
   access key and secret to enable end users to interact with the gateway.
   There are two types of users: a <emphasis>user</emphasis> and
   <emphasis>subuser</emphasis>. While <emphasis>users</emphasis> are used when
   interacting with the S3 interface, <emphasis>subusers</emphasis> are users
   of the &swift; interface. Each subuser is associated to a user.
  </para>

  <procedure>
   <step>
    <para>
     To create a &swift; user&mdash;which is a <emphasis>subuser</emphasis> in
     our terminology&mdash;you need to create the associated
     <emphasis>user</emphasis> first.
    </para>
<screen>sudo radosgw-admin user create --uid=<replaceable>username</replaceable> \
 --display-name="<replaceable>display-name</replaceable>" --email=<replaceable>email</replaceable></screen>
    <para>
     For example:
    </para>
<screen>sudo radosgw-admin user create \
   --uid=example_user \
   --display-name="Example User" \
   --email=penguin@example.com</screen>
   </step>
   <step>
    <para>
     To create a subuser (&swift; interface) for the user, you must specify the
     user ID (--uid=<replaceable>username</replaceable>), a subuser ID, and the
     access level for the subuser.
    </para>
<screen>radosgw-admin subuser create --uid=<replaceable>uid</replaceable> \
 --subuser=<replaceable>uid</replaceable> \
 --access=[ <replaceable>read | write | readwrite | full</replaceable> ]</screen>
    <para>
     For example:
    </para>
<screen>radosgw-admin subuser create --uid=example_user \
 --subuser=example_user:swift --access=full</screen>
   </step>
   <step>
    <para>
     Generate a secret key for the user.
    </para>
<screen>sudo radosgw-admin key create \
   --gen-secret \
   --subuser=example_user:swift \
   --key-type=swift</screen>
   </step>
   <step>
    <para>
     Both commands will output JSON-formatted data showing the user state.
     Notice the following lines, and remember the <literal>secret_key</literal>
     value:
    </para>
<screen>"swift_keys": [
   { "user": "example_user:swift",
     "secret_key": "r5wWIxjOCeEO7DixD1FjTLmNYIViaC6JVhi3013h"}],</screen>
   </step>
  </procedure>

  <para>
   For more information on using &swift; client, see
   <xref linkend="ceph-rgw-access"/>.
  </para>
 </sect1>
 <sect1 xml:id="storage-bp-account-swiftrm">
  <title>Removing &swift; Users</title>

  <para>
   When you remove a user, the user and subuser are removed from the system.
   However, you may remove only the subuser if you want. To remove a user (and
   subuser), specify <option>user rm</option> and the user ID.
  </para>

<screen>radosgw-admin user rm --uid=example_user</screen>

  <para>
   To remove the subuser only, specify <option>subuser rm</option> and the
   subuser ID.
  </para>

<screen>radosgw-admin subuser rm --uid=example_user:swift</screen>

  <para>
   You can make use of the following options:
  </para>

  <variablelist>
   <varlistentry>
    <term>--purge-data</term>
    <listitem>
     <para>
      Purges all data associated to the user ID.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>--purge-keys</term>
    <listitem>
     <para>
      Purges all keys associated to the user ID.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <tip>
   <title>Removing a Subuser</title>
   <para>
    When you remove a subuser, you are removing access to the Swift interface.
    The user will remain in the system. To remove the subuser, specify
    <option>subuser rm</option> and the subuser ID.
   </para>
<screen>sudo radosgw-admin subuser rm --uid=example_user:swift</screen>
   <para>
    You can make use of the following option:
   </para>
   <variablelist>
    <varlistentry>
     <term>--purge-keys</term>
     <listitem>
      <para>
       Purges all keys associated to the user ID.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </tip>
 </sect1>
 <sect1 xml:id="storage-bp-account-user-pwd">
  <title>Changing S3 and &swift; User Access and Secret Keys</title>

  <para>
   The <literal>access_key</literal> and <literal>secret_key</literal>
   parameters identify the &rgw; user when accessing the gateway. Changing the
   existing user keys is the same as creating new ones, as the old keys get
   overwritten.
  </para>

  <para>
   For S3 users, run the following:
  </para>

<screen>radosgw-admin key create --uid=<replaceable>example_user</replaceable> --key-type=s3 --gen-access-key --gen-secret</screen>

  <para>
   For &swift; users, run the following:
  </para>

<screen>radosgw-admin key create --subuser=<replaceable>example_user</replaceable>:swift --key-type=swift --gen-secret</screen>

  <variablelist>
   <varlistentry>
    <term><option>--key-type=<replaceable>type</replaceable></option>
    </term>
    <listitem>
     <para>
      Specifies the type of key. Either <literal>swift</literal> or
      <literal>s3</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--gen-access-key</option>
    </term>
    <listitem>
     <para>
      Generates a random access key (for S3 user by default).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--gen-secret</option>
    </term>
    <listitem>
     <para>
      Generates a random secret key.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--secret=<replaceable>key</replaceable></option>
    </term>
    <listitem>
     <para>
      Specifies a secret key, for example manually generated.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
